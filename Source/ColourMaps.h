#pragma once

#include <array>
#include <juce_core/juce_core.h>

// 12 points, rgb interleaved.
#define COLOUR_MAP_SIZE 12*3
#define COLOUR_MAP_NUM_COLOURS 12

#define ACCENT_COLOURS_SIZE 2*3
#define ACCENT_COLOURS_NUM_COLOURS 2

// used for the spectrogram.
typedef std::array<float, COLOUR_MAP_SIZE> ColourMap;
// used for the analyser.
typedef std::array<float, ACCENT_COLOURS_SIZE> AccentColours;

static const float* getColourmapData(const ColourMap& cmap)
{
    return cmap.data();
}

static const float* getAccentData(const AccentColours& colours)
{
    return colours.data();
}

inline const ColourMap INFERNO =
{
    0.001462f, 0.000466f, 0.013866f,
    0.076637f, 0.041905f, 0.205799f,
    0.224763f, 0.036405f, 0.388129f,
    0.372768f, 0.073915f, 0.4324f,
    0.522206f, 0.12815f,  0.419549f,
    0.66454f,  0.181539f, 0.369846f,
    0.796607f, 0.254728f, 0.287264f,
    0.902003f, 0.364492f, 0.184116f,
    0.969163f, 0.515946f, 0.063488f,
    0.987714f, 0.682807f, 0.072489f,
    0.960626f, 0.859069f, 0.29801f,
    0.988362f, 0.998364f, 0.644924f
};

inline const ColourMap PLASMA =
{
    0.050383f, 0.029803f, 0.527975f,
    0.241396f, 0.014979f, 0.610259f,
    0.387183f, 0.001434f, 0.654177f,
    0.523633f, 0.024532f, 0.652901f,
    0.650746f, 0.125309f, 0.595617f,
    0.752312f, 0.227133f, 0.513149f,
    0.836801f, 0.329105f, 0.430905f,
    0.907365f, 0.434524f, 0.35297f,
    0.963203f, 0.553865f, 0.271909f,
    0.991985f, 0.681179f, 0.195295f,
    0.986509f, 0.822401f, 0.143557f,
    0.940015f, 0.975158f, 0.131326f
};

inline const ColourMap VIRIDIS =
{
    0.267004f, 0.004874f, 0.329415f,
    0.283072f, 0.130895f, 0.449241f,
    0.262138f, 0.242286f, 0.520837f,
    0.220057f, 0.343307f, 0.549413f,
    0.177423f, 0.437527f, 0.557565f,
    0.143343f, 0.522773f, 0.556295f,
    0.119512f, 0.607464f, 0.540218f,
    0.166383f, 0.690856f, 0.496502f,
    0.319809f, 0.770914f, 0.411152f,
    0.525776f, 0.833491f, 0.288127f,
    0.762373f, 0.876424f, 0.137064f,
    0.993248f, 0.906157f, 0.143936f
};

inline const ColourMap COOLWARM =
{
    0.0f, 0.0f, 0.3f,
    0.0f, 0.0f, 0.5525490196078431f,
    0.0f, 0.0f, 0.8050980392156861f,
    0.08235294117647059f, 0.08235294117647059f, 1.0f,
    0.4588235294117647f, 0.4588235294117647f, 1.0f,
    0.8196078431372549f, 0.8196078431372549f, 1.0f,
    1.0f, 0.8196078431372549f, 0.8196078431372549f,
    1.0f, 0.45882352941176474f, 0.45882352941176474f,
    1.0f, 0.08235294117647063f, 0.08235294117647063f,
    0.8607843137254902f, 0.0f, 0.0f,
    0.6803921568627451f, 0.0f, 0.0f,
    0.5f, 0.0f, 0.0f
};

inline const ColourMap RAINBOW =
{
    0.5f, 0.0f, 1.0f,
    0.3196078431372549f, 0.2795825925967438f, 0.989980213280707f,
    0.1392156862745098f, 0.53686659764418f, 0.9601216453746282f,
    0.04117647058823526f, 0.7513318895568732f, 0.9110226492460883f,
    0.22941176470588232f, 0.9110226492460882f, 0.8403440716378927f,
    0.40980392156862744f, 0.989980213280707f, 0.7553827347189938f,
    0.5901960784313725f, 0.989980213280707f, 0.6552838500134537f,
    0.7705882352941176f, 0.9110226492460884f, 0.5420533564724495f,
    0.9588235294117646f, 0.7513318895568735f, 0.41235631747390367f,
    1.0f, 0.5368665976441802f, 0.27958259259674395f,
    1.0f, 0.279582592596744f, 0.14120615182309149f,
    1.0f, 0.0f, 0.0f
};

inline const ColourMap HOT =
{
    0.0416f, 0.0f, 0.0f,
    0.2783814132520015f, 0.0f, 0.0f,
    0.5151628265040029f, 0.0f, 0.0f,
    0.7519442397560044f, 0.0f, 0.0f,
    0.9990204970624408f, 0.0f, 0.0f,
    1.0f, 0.23578488890837906f, 0.0f,
    1.0f, 0.47254921004871014f, 0.0f,
    1.0f, 0.7093135311890413f, 0.0f,
    1.0f, 0.9563719532485172f, 0.0f,
    1.0f, 1.0f, 0.2897051720581133f,
    1.0f, 1.0f, 0.6448525860290567f,
    1.0f, 1.0f, 1.0f
};

inline const ColourMap COPPER =
{
    0.0f, 0.0f, 0.0f,
    0.11141865890495223f, 0.07046117647058824f, 0.04487254901960784f,
    0.22283731780990446f, 0.14092235294117647f, 0.08974509803921568f,
    0.3342559767148567f, 0.2113835294117647f, 0.1346176470588235f,
    0.45051892513741554f, 0.28490823529411763f, 0.18144117647058822f,
    0.5619375840423678f, 0.3553694117647059f, 0.22631372549019607f,
    0.67335624294732f, 0.42583058823529407f, 0.27118627450980387f,
    0.7847749018522723f, 0.4962917647058823f, 0.3160588235294117f,
    0.9010378502748311f, 0.5698164705882353f, 0.36288235294117643f,
    1.0f, 0.6402776470588235f, 0.4077549019607843f,
    1.0f, 0.7107388235294118f, 0.45262745098039214f,
    1.0f, 0.7812f, 0.4975f
};

inline const ColourMap PINK =
{
    0.1178f, 0.0f, 0.0f,
    0.3907973570559453f, 0.24500250122108944f, 0.24500250122108944f,
    0.5402557971212677f, 0.3467107606380547f, 0.3467107606380547f,
    0.656529337246749f, 0.42471789198083315f, 0.42471789198083315f,
    0.7590381506887389f, 0.49308709621591973f, 0.49308709621591973f,
    0.7978667785300726f, 0.6178787939552057f, 0.5506790408339232f,
    0.8346988067961009f, 0.7216993276880336f, 0.6028114313873726f,
    0.8699774960106137f, 0.8123799745850334f, 0.6507899790098614f,
    0.9053210412465118f, 0.8972495541448482f, 0.6973320464866346f,
    0.9379398064230418f, 0.9379398064230418f, 0.8018004825088355f,
    0.9694647807844866f, 0.9694647807844866f, 0.9063233018543019f,
    1.0f, 1.0f, 1.0f
};

inline const ColourMap GREY =
{
    0.0f, 0.0f, 0.0f,
    0.09019607843137255f, 0.09019607843137255f, 0.09019607843137255f,
    0.1803921568627451f, 0.1803921568627451f, 0.1803921568627451f,
    0.27058823529411763f, 0.27058823529411763f, 0.27058823529411763f,
    0.36470588235294116f, 0.36470588235294116f, 0.36470588235294116f,
    0.4549019607843137f, 0.4549019607843137f, 0.4549019607843137f,
    0.5450980392156862f, 0.5450980392156862f, 0.5450980392156862f,
    0.6352941176470588f, 0.6352941176470588f, 0.6352941176470588f,
    0.7294117647058823f, 0.7294117647058823f, 0.7294117647058823f,
    0.8196078431372549f, 0.8196078431372549f, 0.8196078431372549f,
    0.9098039215686274f, 0.9098039215686274f, 0.9098039215686274f,
    1.0f, 1.0f, 1.0f
};

inline const ColourMap GNUPLOT2 =
{
    0.0f, 0.0f, 0.0f,
    0.0f, 0.0f, 0.3607843137254902f,
    0.0f, 0.0f, 0.7215686274509804f,
    0.06433823529411753f, 0.0f, 1.0f,
    0.3584558823529411f, 0.0f, 1.0f,
    0.6403186274509804f, 0.06980392156862747f, 0.9301960784313726f,
    0.9221813725490193f, 0.2501960784313725f, 0.7498039215686276f,
    1.0f, 0.4305882352941176f, 0.5694117647058825f,
    1.0f, 0.6188235294117647f, 0.38117647058823545f,
    1.0f, 0.7992156862745098f, 0.20078431372549033f,
    1.0f, 0.9796078431372549f, 0.020392156862745203f,
    1.0f, 1.0f, 1.0f
};

inline const AccentColours INFERNO_ACCENT = {
    0.90200f, 0.36449f, 0.18411f,
    0.98836f, 0.99836f, 0.64492f
};

inline const AccentColours PLASMA_ACCENT = {
    0.90736f, 0.43452f, 0.35297f,
    0.94001f, 0.97515f, 0.13132f
};

inline const AccentColours VIRIDIS_ACCENT = {
    0.17742f, 0.43752f, 0.55756f,
    0.52577f, 0.83349f, 0.28812f
};

inline const AccentColours COOLWARM_ACCENT = {
    1.00000f, 1.00000f, 1.00000f,
    1.00000f, 0.00000f, 0.00000f
};

inline const AccentColours RAINBOW_ACCENT = {
    0.59019f, 0.98998f, 0.65528f,
    1.00000f, 0.27958f, 0.14120f
};

inline const AccentColours HOT_ACCENT = {
    1.00000f, 1.00000f, 1.00000f,
    1.00000f, 1.00000f, 1.00000f
};

inline const AccentColours COPPER_ACCENT = {
    0.45051f, 0.28490f, 0.18144f,
    1.00000f, 0.78120f, 0.49750f
};

inline const AccentColours PINK_ACCENT = {
    0.65652f, 0.42471f, 0.42471f,
    0.90532f, 0.89724f, 0.69733f
};

inline const AccentColours GREY_ACCENT = {
    0.54509f, 0.54509f, 0.54509f,
    0.90980f, 0.90980f, 0.90980f,
};

inline const AccentColours GNUPLOT2_ACCENT = {
    0.00000f, 0.00000f, 0.72156f,
    1.00000f, 1.00000f, 0.00000f
};

static const const float* getColourMapForCode(int code)
{
    switch (code)
    {
        case 0: return getColourmapData(INFERNO);
        case 1: return getColourmapData(PLASMA);
        case 2: return getColourmapData(VIRIDIS);
        case 3: return getColourmapData(COOLWARM);
        case 4: return getColourmapData(RAINBOW);
        case 5: return getColourmapData(HOT);
        case 6: return getColourmapData(COPPER);
        case 7: return getColourmapData(PINK);
        case 8: return getColourmapData(GREY);
        case 9: return getColourmapData(GNUPLOT2);
        default :
            DBG("NO COLOURMAP FOR THIS CODE : " + code);
            return getColourmapData(INFERNO);
    }
}

static const const float* getAccentColoursForCode(int code)
{
    switch (code)
    {
    case 0: return getAccentData(INFERNO_ACCENT);
    case 1: return getAccentData(PLASMA_ACCENT);
    case 2: return getAccentData(VIRIDIS_ACCENT);
    case 3: return getAccentData(COOLWARM_ACCENT);
    case 4: return getAccentData(RAINBOW_ACCENT);
    case 5: return getAccentData(HOT_ACCENT);
    case 6: return getAccentData(COPPER_ACCENT);
    case 7: return getAccentData(PINK_ACCENT);
    case 8: return getAccentData(GREY_ACCENT);
    case 9: return getAccentData(GNUPLOT2_ACCENT);
    default:
        DBG("NO ACCENT COLOURS FOR THIS CODE : " + code);
        return getAccentData(INFERNO_ACCENT);
    }
}